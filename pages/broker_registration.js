import Navbar from "../src/component/shared/Navbar/Navbar";
import Footer from "../src/component/shared/Footer/Footer";

import Head from "next/head";
import { Box, Button, Container, Grid, Typography } from "@mui/material";
import BaseStepper from "../src/component/reuseable/baseStepper/BaseStepper";
import { Fragment, useState } from "react";
import PersonalData from "../src/component/brokerRegistration/personalData/PersonalData";
import AddressData from "../src/component/brokerRegistration/Address/AddressData";
import PerformanceData from "../src/component/brokerRegistration/performance/PerformanceData";
import Image from "next/image";
import stepFinish from "../public/Images/step_finish.png";
import BrokerRegistrationFooter from "../src/component/shared/Footer/BrokerRegistrationFooter";

const steps = ["Personal Data", "Address", "Performance"];

export default function BrokerRegistration(props) {
  const [activeStep, setActiveStep] = useState(0);
  const [skipped, setSkipped] = useState(new Set());

  const isStepOptional = (step) => {
    return step === 1;
  };

  const isStepSkipped = (step) => {
    return skipped.has(step);
  };

  const handleNext = () => {
    let newSkipped = skipped;
    if (isStepSkipped(activeStep)) {
      newSkipped = new Set(newSkipped.values());
      newSkipped.delete(activeStep);
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1);
    setSkipped(newSkipped);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleSkip = () => {
    if (!isStepOptional(activeStep)) {
      // You probably want to guard against something like this,
      // it should never occur unless someone's actively trying to break something.
      throw new Error("You can't skip a step that isn't optional.");
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1);
    setSkipped((prevSkipped) => {
      const newSkipped = new Set(prevSkipped.values());
      newSkipped.add(activeStep);
      return newSkipped;
    });
  };

  const handleReset = () => {
    setActiveStep(0);
  };
  return (
    <div>
      <Head>
        <title>Real Estate App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="section">
        <Navbar shape={false} />
        <Box>
          <Container maxWidth="md">
            <BaseStepper
              steps={steps}
              activeStep={activeStep}
              isStepSkipped={isStepSkipped}
              marginTop={"2vh"}
            />
            {activeStep === steps.length ? (
              <Container maxWidth="xs">
                <Fragment>
                  {/* <Typography sx={{ mt: 2, mb: 1 }}>
                  All steps completed - you&apos;re finished
                </Typography> */}

                  <Grid
                    container
                    direction="column"
                    justifyContent="center"
                    alignItems="center"
                  >
                    <Image src={stepFinish} alt="stepFinish" />
                    <Typography
                      variant="p"
                      sx={{
                        color: "#1A1859",
                        fontSize: "24px",
                        fontWeight: "700",
                        lineHeight: "29px",
                        textAlign: "center",
                        mt: 2,
                      }}
                    >
                      We send your registration for approval
                    </Typography>
                    <Typography
                      variant="p"
                      sx={{
                        color: "#7C7C99",
                        fontSize: "16px",
                        fontWeight: "400",
                        lineHeight: "22px",
                        textAlign: "center",
                        mt: 2,
                      }}
                    >
                      You will soon receive an email with more information, keep
                      an eye on your spam folder.
                    </Typography>
                  </Grid>
                  <Button
                    fullWidth
                    sx={{
                      mt: 1,
                      py: 1,
                      background:
                        " linear-gradient(90deg, #20BAF6 0%, #7450F0 100%)",
                      color: "#ffffff",
                      fontSize: "16px",
                      fontWeight: "600",
                      lineHeight: "22px",
                      textTransform: "none",
                      mt: 3,
                      mb: 5,
                    }}
                    //   onClick={handleProposalClose}
                  >
                    Conclude
                  </Button>
                  {/* <Box sx={{ display: "flex", flexDirection: "row", pt: 2 }}>
              <Box sx={{ flex: "1 1 auto" }} />
              <Button onClick={handleReset}>Reset</Button>
            </Box> */}
                </Fragment>
              </Container>
            ) : (
              <Fragment>
                {activeStep === 0 ? (
                  <PersonalData handleNext={handleNext} />
                ) : activeStep === 1 ? (
                  <AddressData
                    handleNext={handleNext}
                    handleBack={handleBack}
                  />
                ) : (
                  <PerformanceData
                    handleNext={handleNext}
                    handleBack={handleBack}
                  />
                )}
                <Grid
                  container
                  direction="row"
                  justifyContent={{
                    xs: "flex-start",
                    sm: "flex-start",
                    md: "flex-start",
                    lg: "flex-end",
                    xl: "flex-end",
                  }}
                  alignItems="center"
                  sx={{
                    // display: "flex",
                    // flexDirection: "row",

                    pt: 2,
                  }}
                >
                  {/* {activeStep !== 0 && (
                    <Button
                      color="inherit"
                      // disabled={activeStep === 0}
                      onClick={handleBack}
                      sx={{
                        mr: 1,
                        border: "1px solid #002152",
                        borderRadius: "4px",
                        px: 2,
                        py: 1,
                        color: "#002152",
                        fontSize: "16px",
                        fontWeight: "600",
                        lineHeight: "22px",
                        textTransform: "none",
                      }}
                    >
                      Come back
                    </Button>
                  )} */}

                  {/* {isStepOptional(activeStep) && (
                <Button
                  sx={{
                    mr: 1,
                    border: "1px solid #002152",
                    borderRadius: "4px",
                    px: 2,
                    py: 1,
                    color: "#002152",
                    fontSize: "16px",
                    fontWeight: "600",
                    lineHeight: "22px",
                    textTransform: "none",
                  }}
                  color="inherit"
                  onClick={handleSkip}
                >
                  Skip
                </Button>
              )} */}

                  {/* <Button
                    onClick={handleNext}
                    sx={{
                      background: "#7450F0",
                      borderRadius: "4px",
                      px: 2,
                      py: 1,
                      color: "#ffffff",
                      fontSize: "16px",
                      fontWeight: "600",
                      lineHeight: "22px",
                      textTransform: "none",
                      boxShadow: "0px 4px 8px rgba(81, 51, 182, 0.32)",
                      "&:hover": {
                        background: "#7450F0",
                        borderRadius: "4px",
                        px: 2,
                        py: 1,
                        color: "#ffffff",
                        fontSize: "16px",
                        fontWeight: "600",
                        lineHeight: "22px",
                        textTransform: "none",
                        boxShadow: "0px 4px 8px rgba(81, 51, 182, 0.32)",
                      },
                    }}
                  >
                    {activeStep === steps.length - 1
                      ? "Submit Proposal"
                      : "Next"}
                  </Button> */}
                </Grid>
              </Fragment>
            )}
          </Container>
        </Box>
        <BrokerRegistrationFooter />
      </main>
    </div>
  );
}
