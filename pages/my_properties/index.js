import Head from 'next/head'
import Image from 'next/image'
import PropTypes from 'prop-types'
import Tabs from '@mui/material/Tabs'
import Tab from '@mui/material/Tab'
import Typography from '@mui/material/Typography'
import Box from '@mui/material/Box'
import ResponsiveDrawer from '../../src/component/sharedProposal/ResponsiveDrawer/ResponsiveDrawer'
import {
	Badge,
	Button,
	Container,
	Grid,
	ListItem,
	ListItemButton,
	ListItemIcon,
	ListItemText,
} from '@mui/material'
import { useEffect, useState } from 'react'
import Releases from '../../src/component/properties/Releases/Releases'
import ThirdTab from '../../src/component/properties/Third/ThirdTab'
import NewRegistration from '../../src/component/properties/NewRegistration/NewRegistration'
import notifyImage from '../../public/Images/notify.png'
import Link from 'next/link'
import { getSession, useSession } from 'next-auth/react'
import { useRouter } from 'next/router'
import { _baseURL } from '../../consts'
import useChannel from '@/hooks/useChannel'
import Popover from '@mui/material/Popover'
import { FixedSizeList } from 'react-window'
import { useDispatch, useSelector } from 'react-redux'
import NotificationsNoneOutlinedIcon from '@mui/icons-material/NotificationsNoneOutlined'
import {
	GetAllNotification,
	notificationAddPusherItem,
	notificationRemove,
} from '@/redux/all-notification/actions'
import {
	findNotificationCountData,
	notificationAddCount,
} from '@/redux/notificationCount/actions'
import { NOTIFICATION_ADD_COUNT } from '@/redux/notificationCount/types'
import { NotificationReadApi } from '@/api'

const drawerWidth = 240

function renderRow(props) {
	const { index, style } = props

	return (
		<ListItem style={style} key={index} component="div" disablePadding>
			<ListItemButton>
				<ListItemText primary={`Item ${index + 1}`} />
			</ListItemButton>
		</ListItem>
	)
}

function TabPanel(props) {
	const { children, value, index, ...other } = props

	return (
		<div
			role="tabpanel"
			hidden={value !== index}
			id={`simple-tabpanel-${index}`}
			aria-labelledby={`simple-tab-${index}`}
			{...other}
		>
			{value === index && (
				<Box sx={{ p: 3 }}>
					<Box>{children}</Box>
				</Box>
			)}
		</div>
	)
}

TabPanel.propTypes = {
	children: PropTypes.node,
	index: PropTypes.number.isRequired,
	value: PropTypes.number.isRequired,
}

function a11yProps(index) {
	return {
		id: `simple-tab-${index}`,
		'aria-controls': `simple-tabpanel-${index}`,
	}
}

export default function MyProperties(props) {
	const router = useRouter()
	const { query } = router
	const { data: session } = useSession()

	const dispatch = useDispatch()
	useEffect(() => {
		dispatch(findNotificationCountData())
		dispatch(GetAllNotification())
	}, [dispatch])
	const notificationCountData = useSelector(
		(state) => state?.notificationCount?.notificationCountData
	)

	const notificationData = useSelector(
		(state) => state?.notification?.notificationData
	)

	useChannel('notification-broadcast.' + session.user.userId, (channel) => {
		// console.log('useChannel', channel)
		channel
			// .here((...args) => {
			// 	console.log('notification-broadcast:here', ...args)
			// })
			// .joining((...args) => {
			// 	console.log('notification-broadcast:joining', ...args)
			// })
			// .leaving((...args) => {
			// 	console.log('notification-broadcast:leaving', ...args)
			// })
			.listen('.OnCreateNewSchedule', (event) => {
				console.log('notification-broadcast:NotificationEvent', event)
				dispatch(notificationAddPusherItem(event.notification))
				dispatch(notificationAddCount(1))
			})
		// .listenForWhisper('ping', (event) => {
		// 	console.log('notification-broadcast:ping', event)
		// })
	})

	const handleReadNotification = async (data) => {
		const [error, response] = await NotificationReadApi(data?.id)
		if (!error) {
			dispatch(notificationRemove(data?.id))
			dispatch(notificationAddCount(-1))
		}
	}

	const [anchorEl, setAnchorEl] = useState(null)

	const handleClick = (event) => {
		setAnchorEl(event.currentTarget)
	}

	const handleClose = () => {
		setAnchorEl(null)
	}

	const open = Boolean(anchorEl)
	const id = open ? 'simple-popover' : undefined

	const [value, setValue] = useState(+query?.value || 0)

	const handleChange = (event, newValue) => {
		setValue(newValue)
		newValue === 1
			? router.replace({
					pathname: '/my_properties',
					query: {
						status: 'third',
						page: 1,
						per_page: 9,
						value: newValue,
					},
			  })
			: newValue === 2
			? router.replace({
					pathname: '/my_properties',
					query: { status: 'new', page: 1, per_page: 9, value: newValue },
			  })
			: router.replace({
					pathname: '/my_properties',
					query: { page: 1, per_page: 9, value: newValue },
			  })
	}
	return (
		<div>
			<Head>
				<title>Lokkan</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/negotiate.png" />
			</Head>

			<main>
				<Box sx={{ display: 'flex' }}>
					<ResponsiveDrawer />
					<Box
						sx={{
							//   backgroundColor: "#f6f8fc",
							flexGrow: 1,
							background: '#F2F5F6',
							minHeight: '100vh',
							width: { sm: `calc(100% - ${drawerWidth}px)` },
							paddingX: { xs: 0, sm: 0, md: 6, lg: 6, xl: 6 },
							paddingTop: { xs: 6, sm: 6, md: 6, lg: 8, xl: 3 },
							paddingBottom: { xs: 3, sm: 3, md: 3, lg: 4, xl: 3 },
						}}
					>
						<Grid
							container
							direction="row"
							justifyContent="space-between"
							alignItems="flex-start"
						>
							<Typography
								variant="p"
								sx={{
									color: '#002152',
									fontSize: '24px',
									fontWeight: '700',
									lineHeight: '32px',
									ml: { xs: 4, sm: 4, md: 0, lg: 0, xl: 0 },
									mt: { xs: 1, sm: 1, md: 0, lg: 0, xl: 0 },
								}}
							>
								My Properties
							</Typography>
							<Button
								aria-describedby={id}
								variant="contained"
								onClick={handleClick}
								sx={{
									p: 0,
									background: 'transparent',
									boxShadow: 'none',
									'&:hover': {
										boxShadow: 'none',
										background: 'transparent',
									},
								}}
							>
								<Badge
									badgeContent={notificationCountData?.count}
									color="primary"
								>
									<Image src={notifyImage} alt="notify" />
								</Badge>
							</Button>
							<Popover
								id={id}
								open={open}
								anchorEl={anchorEl}
								onClose={handleClose}
								anchorOrigin={{
									vertical: 'bottom',
									horizontal: 'left',
								}}
							>
								<Box
									sx={{
										width: '100%',
										height: 350,
										maxWidth: 360,
										minWidth: 360,
										bgcolor: 'background.paper',
									}}
								>
									{/* <FixedSizeList
										height={400}
										width={360}
										itemSize={46}
										itemCount={200}
										overscanCount={10}
									>
										{renderRow}
									</FixedSizeList> */}
									{notificationData?.map((data, index) => (
										<ListItem
											// style={style}
											key={index}
											component="div"
											disablePadding
											sx={{ width: 360 }}
										>
											<ListItemButton
												onClick={() => handleReadNotification(data)}
											>
												<ListItemIcon>
													<NotificationsNoneOutlinedIcon
														sx={{ color: '#7dd3fc' }}
													/>
												</ListItemIcon>
												<ListItemText primary={data?.data} />
											</ListItemButton>
										</ListItem>
									))}
								</Box>
							</Popover>
						</Grid>
						<Container maxWidth="xl">
							<Box sx={{ width: '100%' }}>
								<Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
									<Tabs
										value={value}
										onChange={handleChange}
										aria-label="basic tabs example"
										variant="scrollable"
									>
										<Tab
											sx={{ fontWeight: '600' }}
											label="Releases"
											{...a11yProps(0)}
										/>
										<Tab
											sx={{ fontWeight: '600' }}
											label="Third"
											{...a11yProps(1)}
										/>
										{session.user?.role === 'admin' && (
											<Tab
												sx={{ fontWeight: '600' }}
												label="New Registration"
												{...a11yProps(2)}
											/>
										)}
									</Tabs>
								</Box>
								<Container maxWidth="xl">
									<Grid
										container
										direction="row"
										justifyContent={{
											xs: 'flex-start',
											sm: 'flex-start',
											md: 'flex-start',
											lg: 'flex-end',
										}}
										alignItems="center"
										gap={2}
										sx={{ mt: 3 }}
									>
										<Link href="/my_properties/new_property">
											{/* <a
                        style={{
                          textDecoration: "none",
                          listStyle: "none",
                          width: "100%",
                        }}
                      > */}
											<Button
												sx={{
													textTransform: 'none',
													background: '#0362F0',
													borderRadius: '4px',
													color: '#ffffff',
													fontSize: '16px',
													fontWeight: '600',
													px: 4,
													py: 1,
													width: {
														xs: '100%',
														sm: '100%',
														md: '30%',
														lg: '30%',
														xl: '20%',
													},
													'&:hover': {
														background: '#0362F0',
														borderRadius: '4px',
														color: '#ffffff',
													},
												}}
											>
												New property
											</Button>
											{/* </a> */}
										</Link>

										<Link href="/my_properties/new_venture">
											<Button
												sx={{
													textTransform: 'none',
													border: '1px solid #002152',
													borderRadius: '4px',
													color: '#002152',
													fontSize: '16px',
													fontWeight: '600',
													px: 4,
													py: 1,
													width: {
														xs: '100%',
														sm: '100%',
														md: '30%',
														lg: '30%',
														xl: '20%',
													},
												}}
											>
												New venture
											</Button>
										</Link>
									</Grid>
								</Container>
								<TabPanel value={value} index={0}>
									<Releases queryData={query} />
								</TabPanel>
								<TabPanel value={value} index={1}>
									<ThirdTab />
								</TabPanel>
								<TabPanel value={value} index={2}>
									<NewRegistration />
								</TabPanel>
							</Box>
						</Container>
					</Box>
				</Box>
			</main>
		</div>
	)
}

export async function getServerSideProps(context) {
	//* Session for SSG
	const session = await getSession(context)
	//? If Not Logged In
	if (!session) {
		return {
			redirect: {
				destination: '/',
			},
			props: {
				session: null,
			},
		}
	}

	return {
		props: {
			session: session,
		},
	}
}
