import Head from 'next/head'
import Image from 'next/image'
import PropTypes from 'prop-types'
import Tabs from '@mui/material/Tabs'
import Tab from '@mui/material/Tab'
import Typography from '@mui/material/Typography'
import Box from '@mui/material/Box'
import ResponsiveDrawer from '../src/component/sharedProposal/ResponsiveDrawer/ResponsiveDrawer'
import { Button, Container, Grid } from '@mui/material'
import { useState } from 'react'
import Releases from '../src/component/properties/Releases/Releases'
import ThirdTab from '../src/component/properties/Third/ThirdTab'
import NewRegistration from '../src/component/properties/NewRegistration/NewRegistration'
import notifyImage from '../public/Images/notify.png'
import KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown'
import KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp'
import Pendants from '../src/component/proposals/pendants/Pendants'
import Accepted from '../src/component/proposals/accepted/Accepted'
import Completed from '../src/component/proposals/completed/Completed'
import TabRegistered from '../src/component/brokers/TabRegistered/TabRegistered'
import TabPendant from '../src/component/brokers/TabPendant/TabPendant'
import { useDispatch, useSelector } from 'react-redux'
import { useEffect } from 'react'
import { findBrokerCountData } from '@/redux/brokerCount/actions'
import { useSession } from 'next-auth/react'

const drawerWidth = 240

function TabPanel(props) {
	const { children, value, index, ...other } = props

	return (
		<div
			role="tabpanel"
			hidden={value !== index}
			id={`simple-tabpanel-${index}`}
			aria-labelledby={`simple-tab-${index}`}
			{...other}
		>
			{value === index && (
				<Box sx={{ p: 3 }}>
					<Box>{children}</Box>
				</Box>
			)}
		</div>
	)
}

TabPanel.propTypes = {
	children: PropTypes.node,
	index: PropTypes.number.isRequired,
	value: PropTypes.number.isRequired,
}

function a11yProps(index) {
	return {
		id: `simple-tab-${index}`,
		'aria-controls': `simple-tabpanel-${index}`,
	}
}

export default function Brokers(props) {
	const { data: session } = useSession()
	const dispatch = useDispatch()
	useEffect(() => {
		dispatch(findBrokerCountData())
	}, [dispatch])
	const brokerCountData = useSelector(
		(state) => state?.brokerCount?.brokerCountData
	)

	const brokerLoading = useSelector((state) => state?.brokerCount?.loading)
	const [value, setValue] = useState(0)

	const handleChange = (event, newValue) => {
		setValue(newValue)
	}
	return (
		<div>
			<Head>
				<title>Lokkan</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/negotiate.png" />
			</Head>

			<main>
				<Box sx={{ display: 'flex' }}>
					<ResponsiveDrawer />
					<Box
						sx={{
							//   backgroundColor: "#f6f8fc",
							flexGrow: 1,
							background: '#F2F5F6',
							minHeight: '100vh',
							width: { sm: `calc(100% - ${drawerWidth}px)` },
							paddingX: { xs: 0, sm: 0, md: 6, lg: 6, xl: 6 },
							paddingTop: { xs: 6, sm: 6, md: 6, lg: 8, xl: 3 },
							paddingBottom: { xs: 3, sm: 3, md: 3, lg: 4, xl: 3 },
						}}
					>
						<Grid
							container
							direction="row"
							justifyContent="space-between"
							alignItems="flex-start"
						>
							<Typography
								variant="p"
								sx={{
									color: '#002152',
									fontSize: '24px',
									fontWeight: '700',
									lineHeight: '32px',
									ml: { xs: 4, sm: 4, md: 0, lg: 0, xl: 0 },
									mt: { xs: 1, sm: 1, md: 0, lg: 0, xl: 0 },
								}}
							>
								Brokers
							</Typography>
							<Image src={notifyImage} alt="notify" />
						</Grid>
						<Container maxWidth="xl">
							<Box sx={{ width: '100%' }}>
								<Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
									<Tabs
										value={value}
										onChange={handleChange}
										aria-label="basic tabs example"
										variant="scrollable"
									>
										<Tab
											sx={{ fontWeight: '600' }}
											label={
												brokerLoading
													? 'Registered'
													: `Registered(${
															brokerCountData?.register || 0
													  })`
											}
											{...a11yProps(0)}
										/>
										{session?.user?.role === 'admin' && (
											<Tab
												sx={{ fontWeight: '600' }}
												label={
													brokerLoading
														? 'Pendant'
														: `Pendant(${
																brokerCountData?.pending || 0
														  })`
												}
												{...a11yProps(1)}
											/>
										)}
									</Tabs>
								</Box>

								<TabPanel value={value} index={0}>
									{/* <Pendants /> */}
									<TabRegistered />
								</TabPanel>
								<TabPanel value={value} index={1}>
									{/* <Accepted /> */}
									<TabPendant />
								</TabPanel>
							</Box>
						</Container>
					</Box>
				</Box>
			</main>
		</div>
	)
}
