import Head from "next/head";
import React, { useMemo, useState } from "react";
import Image from "next/image";
import {
  Autocomplete,
  Button,
  Container,
  Grid,
  TextField,
  TextareaAutosize,
  Tooltip,
  Typography,
} from "@mui/material";
import { Box } from "@mui/material";
import ResponsiveDrawer from "../src/component/sharedProposal/ResponsiveDrawer/ResponsiveDrawer";
import BasicBreadcrumbs from "../src/component/reuseable/baseBreadCrumb/BaseBreadCrumb";
import ventureImage from "../public/Images/certidoes.png";
import DeleteOutlineOutlinedIcon from "@mui/icons-material/DeleteOutlineOutlined";
import { useDropzone } from "react-dropzone";
import Link from "next/link";
import BaseTextField from "../src/component/reuseable/baseTextField/BaseTextField";
import { getSession } from "next-auth/react";

const baseStyle = {
  flex: 1,
  display: "flex",
  flexDirection: "column",
  alignItems: "center",
  padding: "50px",
  borderWidth: 2,
  borderRadius: "4px",
  borderColor: "#DBE1E5",
  borderStyle: "dashed",
  backgroundColor: "#F2F5F6",
  color: "#c4c4c4",
  outline: "none",
  transition: "border .24s ease-in-out",
  width: "100%",
  marginTop: "2vh",
};

const activeStyle = {
  borderColor: "#f2f",
};

const acceptStyle = {
  borderColor: "#f8f",
};

const rejectStyle = {
  borderColor: "#f2f",
};

const drawerWidth = 240;

const BreadCrumbsData = [
  { stage: "Start", route: "" },
  { stage: "My properties", route: "" },
];

export default function NewVenture(props) {
  //   const [files, setFiles] = useState([]);
  //   console.log({ files });

  const [files, setFiles] = useState([]);
  console.log(files);

  const onDrop = (acceptedFiles) => {
    console.log(acceptedFiles);
    acceptedFiles.map((file) =>
      Object.assign(file, {
        preview: URL.createObjectURL(file),
      })
    );

    const allFiles = [...files, ...acceptedFiles]; //save all files here
    console.log(allFiles);
    setFiles(allFiles);
  };
  const {
    getRootProps,
    getInputProps,
    isDragActive,
    isDragAccept,
    isDragReject,
  } = useDropzone({
    onDrop,
    accept: {
      "image/jpeg": [],
      "image/png": [],
    },
  });

  const handleDelete = (index) => {
    console.log(index);
    const filterItem = files.filter((file, fileIndex) => fileIndex !== index);
    setFiles(filterItem);
  };
  //   const {
  //     isDragActive,
  //     isDragAccept,
  //     isDragReject,
  //     getRootProps,
  //     getInputProps,
  //   } = useDropzone({
  //     onDrop: (acceptedFiles) => {
  //       setFiles((prevFiles) =>
  //         acceptedFiles.reduce(
  //           (acc, file) => ({
  //             ...acc,
  //             [file.name]: {
  //               file,
  //               fileType: "",
  //             },
  //           }),
  //           prevFiles
  //         )
  //       );
  //     },
  //     accept: ".png,.jpeg",
  //   });
  const style = useMemo(
    () => ({
      ...baseStyle,
      ...(isDragActive ? activeStyle : {}),
      ...(isDragAccept ? acceptStyle : {}),
      ...(isDragReject ? rejectStyle : {}),
    }),
    [isDragActive, isDragReject, isDragAccept]
  );
  //   const acceptedFileItems = Object.keys(files).map((fileName) => {
  //     const currentFile = files[fileName].file;
  //     const onSelectChange = (e) => {
  //       e.persist();
  //       setFiles((prevFiles) => {
  //         return {
  //           ...prevFiles,
  //           [fileName]: {
  //             ...prevFiles[fileName],
  //             fileType: e.target.value,
  //           },
  //         };
  //       });
  //     };
  //     return (
  //       <li key={fileName}>
  //         <div style={{ display: "flex" }}>
  //           <span>
  //             {currentFile.path} - {currentFile.size} bytes
  //           </span>
  //         </div>
  //       </li>
  //     );
  //   });

  return (
    <div>
      <Head>
        <title>Lokkan</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/negotiate.png" />
      </Head>

      <main>
        <Box sx={{ display: "flex" }}>
          <ResponsiveDrawer />
          <Box
            sx={{
              //   backgroundColor: "#f6f8fc",
              flexGrow: 1,

              width: { sm: `calc(100% - ${drawerWidth}px)` },
              paddingX: { xs: 0, sm: 0, md: 6, lg: 6, xl: 6 },
              paddingY: { xs: 0, sm: 0, md: 3, lg: 3, xl: 3 },
            }}
          >
            <Container maxWidth="lg">
              <Grid
                container
                direction="row"
                justifyContent="flex-start"
                alignItems="flex-start"
                sx={{ mt: { xs: 8, sm: 8, md: 8, lg: 0 } }}
              >
                <BasicBreadcrumbs
                  BreadcrumbsData={BreadCrumbsData}
                  lastStageData={"new venture"}
                />
              </Grid>
              <Box sx={{ mt: 3 }}>
                <Grid
                  container
                  direction="row"
                  justifyContent="flex-start"
                  alignItems="flex-start"
                >
                  <Image src={ventureImage} alt="venture" />
                  <Typography
                    variant="p"
                    sx={{
                      color: "#002152",
                      fontSize: "24px",
                      fontWeight: "700",
                      lineHeight: "32px",
                      ml: 1,
                    }}
                  >
                    New Venture
                  </Typography>
                </Grid>
                <Grid
                  container
                  direction="column"
                  justifyContent="flex-start"
                  alignItems="flex-start"
                  sx={{ mt: 4 }}
                >
                  <BaseTextField
                    fullWidth
                    size={"small"}
                    placeholder={"Enterprise name"}
                  />
                  <TextareaAutosize
                    aria-label="minimum height"
                    minRows={3}
                    placeholder="Description"
                    //   value={field.value}
                    style={{
                      marginTop: "3vh",
                      width: "100%",
                      // margin: "2vh 0",
                      color: "rgba(0, 0, 0, 0.87)",
                      fontSize: "17px",
                      outlineColor: "#1976d2",
                      border: `1px solid silver`,
                      borderRadius: "5px",
                      padding: "0.4vh 1.4vh",
                    }}
                  />
                  <Typography
                    variant="p"
                    sx={{
                      color: "#1A1859",
                      fontSize: "16px",
                      lineHeight: "22px",
                      fontWeight: "400",
                      mt: 3,
                    }}
                  >
                    Logo and images of the enterprise (.png or .jpeg)
                  </Typography>

                  <Box {...getRootProps({ style })}>
                    <input {...getInputProps()} />
                    <Typography
                      variant="p"
                      sx={{
                        color: "#6C7A84",
                        fontSize: "14px",
                        fontWeight: "400",
                        lineHeight: "18px",
                        mt: 1,
                      }}
                    >
                      Drag and drop images here
                    </Typography>
                    <Typography
                      variant="p"
                      sx={{
                        color: "#6C7A84",
                        fontSize: "14px",
                        fontWeight: "400",
                        lineHeight: "18px",
                        mt: 1,
                      }}
                    >
                      or
                    </Typography>
                    <Button
                      variant="contained"
                      sx={{
                        textTransform: "none",
                        mt: 1,
                        background: "#0362F0",
                        color: "#ffffff",
                        fontSize: "14px",
                        fontWeight: "600",
                        lineHeight: "18px",
                      }}
                    >
                      select images
                    </Button>
                  </Box>
                </Grid>
                {files.length > 0 && (
                  <Grid container spacing={1} sx={{ mt: 3 }}>
                    {files.map((file, index) => (
                      <Grid
                        item
                        xs={12}
                        sm={12}
                        md={4}
                        lg={3}
                        xl={3}
                        key={index}
                      >
                        <Box
                          sx={{
                            p: 2,
                            boxSizing: "border-box",
                            border: "1px solid #DBE1E5",
                            borderRadius: "6px",
                          }}
                        >
                          <Grid
                            container
                            direction="row"
                            justifyContent="flex-end"
                            alignItems="flex-start"
                          >
                            <DeleteOutlineOutlinedIcon
                              sx={{
                                background: "#F44336",
                                color: "#ffffff",
                                borderRadius: "50%",
                                height: "3vh",
                                width: "3vh",
                                paddingY: "3px",
                              }}
                              onClick={() => handleDelete(index)}
                            />
                          </Grid>
                          <Image
                            src={file.preview}
                            height={70}
                            width={100}
                            layout="responsive"
                            alt="file"
                          />
                          <Autocomplete
                            sx={{ mt: 2 }}
                            disablePortal
                            fullWidth
                            size="small"
                            id="combo-box-demo"
                            options={top100Films}
                            renderInput={(params) => (
                              <TextField {...params} label="Convenient" />
                            )}
                          />
                        </Box>
                      </Grid>
                    ))}
                  </Grid>
                )}
                <Grid
                  container
                  direction="row"
                  justifyContent="flex-end"
                  alignItems="flex-end"
                  sx={{ mt: 2 }}
                >
                  <Link href="/my_properties">
                    <Button
                      variant="outlined"
                      sx={{
                        borderColor: "#002152",
                        fontSize: "16px",
                        fontWeight: "600",
                        color: "#002152",
                        textTransform: "none",
                        paddingX: 4,
                        paddingY: 0.6,
                        mr: 1,
                        "&:hover": {
                          borderColor: "#002152",
                          fontSize: "16px",
                          fontWeight: "600",
                          color: "#002152",
                          textTransform: "none",
                          paddingX: 4,
                          paddingY: 0.6,
                          mr: 1,
                        },
                      }}
                    >
                      Cancel
                    </Button>
                  </Link>
                  <Button
                    variant="outlined"
                    sx={{
                      background: "#34BE84",
                      boxShadow: "0px 4px 8px rgba(34, 148, 100, 0.32)",
                      borderRadius: "4px",
                      fontSize: "16px",
                      fontWeight: "600",
                      lineHeight: "22px",
                      textTransform: "none",
                      color: "#ffffff",
                      paddingX: 4,
                      paddingY: 1,
                      "&:hover": {
                        background: "#34BE84",
                        boxShadow: "0px 4px 8px rgba(34, 148, 100, 0.32)",
                        borderRadius: "4px",
                        fontSize: "16px",
                        fontWeight: "600",
                        lineHeight: "22px",
                        textTransform: "none",
                        color: "#ffffff",
                        paddingX: 4,
                        paddingY: 1,
                      },
                    }}
                  >
                    Save
                  </Button>
                </Grid>
              </Box>
            </Container>
          </Box>
        </Box>
      </main>
    </div>
  );
}

const top100Films = [
  { label: "The Shawshank Redemption", year: 1994 },
  { label: "The Godfather", year: 1972 },
  { label: "The Godfather: Part II", year: 1974 },
  { label: "The Dark Knight", year: 2008 },
  { label: "12 Angry Men", year: 1957 },
  { label: "Schindler's List", year: 1993 },
  { label: "Pulp Fiction", year: 1994 },
];

export async function getServerSideProps(context) {
  //* Session for SSG
  const session = await getSession(context);
  //? If Not Logged In
  if (!session) {
    return {
      redirect: {
        destination: "/",
      },
      props: {
        session: null,
      },
    };
  }

  return {
    props: {
      session: session,
    },
  };
}
